// <auto-generated />
using System;
using Alkomentor.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Alkomentor.Infrastructure.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    [Migration("20230903113759_AddBoozeProMelleDate")]
    partial class AddBoozeProMelleDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Alkomentor.Domain.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Alkomentor.Domain.Booze.Booze", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("CurrentProMille")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("CurrentProMilleUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StopTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("StageId");

                    b.ToTable("Boozes");
                });

            modelBuilder.Entity("Alkomentor.Domain.Booze.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AlcoholPerGram")
                        .HasColumnType("double precision");

                    b.Property<double?>("Degree")
                        .HasColumnType("double precision");

                    b.Property<double>("Dosage")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Drinks");
                });

            modelBuilder.Entity("Alkomentor.Domain.Booze.Gulp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BoozeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("GulpTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Size")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BoozeId");

                    b.HasIndex("DrinkId");

                    b.ToTable("Gulps");
                });

            modelBuilder.Entity("Alkomentor.Domain.Booze.Stage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("MaxProMille")
                        .HasColumnType("double precision");

                    b.Property<double>("MinProMille")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("Alkomentor.Domain.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<bool?>("Gender")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NotifyToken")
                        .HasColumnType("text");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("BoozeDrink", b =>
                {
                    b.Property<Guid>("BoozesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SelectedDrinksId")
                        .HasColumnType("uuid");

                    b.HasKey("BoozesId", "SelectedDrinksId");

                    b.HasIndex("SelectedDrinksId");

                    b.ToTable("BoozeDrink");
                });

            modelBuilder.Entity("Alkomentor.Domain.Booze.Booze", b =>
                {
                    b.HasOne("Alkomentor.Domain.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alkomentor.Domain.Booze.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId");

                    b.Navigation("Profile");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Alkomentor.Domain.Booze.Gulp", b =>
                {
                    b.HasOne("Alkomentor.Domain.Booze.Booze", "Booze")
                        .WithMany("Gulps")
                        .HasForeignKey("BoozeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alkomentor.Domain.Booze.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booze");

                    b.Navigation("Drink");
                });

            modelBuilder.Entity("Alkomentor.Domain.Profile", b =>
                {
                    b.HasOne("Alkomentor.Domain.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BoozeDrink", b =>
                {
                    b.HasOne("Alkomentor.Domain.Booze.Booze", null)
                        .WithMany()
                        .HasForeignKey("BoozesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alkomentor.Domain.Booze.Drink", null)
                        .WithMany()
                        .HasForeignKey("SelectedDrinksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alkomentor.Domain.Booze.Booze", b =>
                {
                    b.Navigation("Gulps");
                });
#pragma warning restore 612, 618
        }
    }
}
